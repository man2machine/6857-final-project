# -*- coding: utf-8 -*-
"""parsing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8E1Z5ty0pIhpcf-gdXaZlXZMJze3985
"""

import re
import os
import copy 
import pandas as pd

def parseEnc(dirname):
  Dict = {}
  enc, dec, setkey, add, com = 'Encrypt', 'Decrypt', 'SetKey', 'AddAuthData', 'ComputeTag'
  for filename in os.listdir('/content/' + dirname + '/Encryption functions'):
    if 'Test' in filename:
      with open(dirname + '/Encryption functions/'+ filename) as f:
          lines = f.readlines()
      
      d = {}
      states = []
      for line in lines:
        if len(line) > 2 and line[-2] in '0123456789':
          states.append(int(line.split('...')[1][:-1]))
        
        if 'second' in line:
          name = line.split()[0]
          nums = float(re.findall('\d+[.]\d+', line)[1])
          func = enc if enc in line else ''
          func = dec if dec in line else func
          func = setkey if 'Set' in line else func
          func = add if add in line else func
          func = com if com in line else func
          if name in d:
            d[name][func] = nums
          else:
            d[name] = {func:nums, 'State_size':states[0]} if states else {func:nums}
            states = states[1:] if len(states) > 1 else states
      Dict[filename[4:-4]] = copy.deepcopy(d)
  d = {}
  for i in Dict:
    for j in Dict[i]:
      d[i + ' ' + j if i not in j else j] = Dict[i][j]
  return pd.DataFrame.from_dict(d).T


ard_csv = parseEnc('RaspberryPI').to_csv('/content/rasp_enc.csv')

ard_csv, rasp_csv

import copy
def parser(dirname):
  Dict = {}
  for filename in os.listdir('/content/' + dirname + '/Hash functions'):
    if 'Test' in filename:
      with open(dirname  + '/Hash functions/'+ filename) as f:
          lines = f.readlines()
      name = filename[4:-4]
      Dict[name] = {}
      for line in lines:
        if 'State' in line:
          Dict[name]['State_size'] = int(line.split('...')[1][:-1])
        if 'second' in line:
          nums = float(re.findall('\d+[.]\d+', line)[1])
          func = line.split('...')[0][:-1]
          if 'Encrypt' in func:
            func = 'Encrypt'
          if 'Finalizing' == func:
            func ="Finalize"
          Dict[name][func] = nums
  return pd.DataFrame.from_dict(Dict)

rasp_hash, ard_hash

def parse(dirname):
  dict = {}
  with open('arduino/TestLWCCombined.txt') as f:
      lines = f.readlines()

  for line in lines:
      if len(line) > 1 and line[-2] == ':':
        name = line[:-2]
        dict[name] = {}

      if 'second' in line:
        nums = re.findall('\d+[.]?\d+', line)
        words = re.findall('[A-Za-z]+', line)
        var = words[0] + ' ' + nums[0]
        function = var +' bytes' if 'packets' not in line else var + ' byte packets'
        dict[name][function] = float(nums[-1])

  return pd.DataFrame.from_dict(dict).T



import numpy as np
import seaborn as sns
ard, rasp = pd.read_csv('ard_enc.csv'), pd.read_csv('rasp_enc.csv')
ard

#sns.scatterplot(x = '')